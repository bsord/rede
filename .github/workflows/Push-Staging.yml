name: 'Push - Staging'

on:
  push:
    branches:
    - staging

jobs:
  infrastructure:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    # Automatically selects the production Terraform workspace
    env:
      TF_WORKSPACE: 'rede-staging'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>\`\`\`${process.env.PLAN}\`\`\`</details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      run: terraform apply -auto-approve

  services:
    name: 'Serverless'
    needs: infrastructure
    runs-on: ubuntu-latest

    # Required for Github-AWS OIDC to work
    permissions:
      id-token: write
      contents: read

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS Credentials
    # Basically run 'aws configure' as you would from local CLI
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::905418409336:role/GithubActionsDeploymentRole
        role-duration-seconds: 1200 # Optional duration, 20 minutes in this case

    # Install Nodejs
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

  # Deploy Auth Service
    - run: npm ci
      name: "Auth Service - Install dependencies"
      working-directory: 'services/auth'

    - name: "Auth Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/auth && serverless deploy"
        entrypoint: /bin/sh

    # Deploy Subscription Service
    - run: npm ci
      name: "Subscription Service - Install dependencies"
      working-directory: 'services/subscription'

    - name: "Subscription Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/subscription && serverless deploy"
        entrypoint: /bin/sh

    # Deploy AI Service
    - run: npm ci
      name: "AI Service - Install dependencies"
      working-directory: 'services/ai'

    - name: "AI Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/ai && serverless deploy"
        entrypoint: /bin/sh

    # Deploy Email Service
    - run: npm ci
      name: "Email Service - Install dependencies"
      working-directory: 'services/email'

    - name: "Email Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/email && serverless deploy"
        entrypoint: /bin/sh
    
    # Deploy Fetch Service
    - run: npm ci
      name: "Fetch Service - Install dependencies"
      working-directory: 'services/fetch'

    - name: "Fetch Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/fetch && serverless deploy"
        entrypoint: /bin/sh

    # Deploy User Service
    - run: npm ci
      name: "User Service - Install dependencies"
      working-directory: 'services/user'

    - name: "User Service - Deploy"
      uses: serverless/github-action@v3.2
      with:
        args: -c "cd ./services/user && serverless deploy"
        entrypoint: /bin/sh

  webapp:
    name: 'Web App'
    needs: services
    runs-on: ubuntu-latest

    # Required for Github-AWS OIDC to work
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ./web-ui

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS Credentials
    # Basically run 'aws configure' as you would from local CLI
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::905418409336:role/GithubActionsDeploymentRole
        role-duration-seconds: 1200 # Optional duration, 20 minutes in this case

    # Install Nodejs
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - run: npm ci
      name: "Install dependencies"

    - run: npm run build
      name: "Build"

    - run: npm run deploy
      name: "Deploy"